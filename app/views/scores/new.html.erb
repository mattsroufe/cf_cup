<div id="carouselExampleControls" class="carousel slide" data-hole-count="<%= @match.course.holes.count %>" data-hole-number="<%= @hole.number %>" data-bs-ride="carousel" data-bs-interval="false">
  <div class="carousel-inner">
    <% 2.times do |i| %>
      <div class="carousel-item <%= 'active' if i == 0 %>">
        <div class="container">
          <div class="row">
            <div class="col text-center">
              <%= @match.course.name %>
          </div>
        </div>
        <div class="row">
          <h2 class="logo text-center mb-0">No. <span class="hole-number"><%= @hole.number %></span></h2>
        </div>
        <div class="row text-center mb-1">
          <div class="col">
            Par: <span class="hole-par"><%= @hole.par %></span>
          </div>
          <div class="col">
            <%= link_to "Scorecard", scores_path(match_id: @match.id) %>
          </div>
          <div class="col">
            Stroke: <span class="hole-stroke"><%= @hole.stroke %></span>
          </div>
        </div>
        <ul class="players row list-group list-group-flush">
          <% @players.each do |player| %>
            <%= render "form", player: player, score: player.scores.find_by!(match_id: @match.id, hole_id: @hole.id) %>
          <% end %>
        </ul>
        </div>
      </div>
    <% end %>
  </div>
  <button class="carousel-control-prev" style="width: 40px; height: 40px; background: #e6dcdc; border: none; box-shadow: var(--box-shadow); border-radius: 20px;" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
    <svg width="24px" height="24px" style="position: absolute; fill: #000; left: 8px; top: 8px;">
      <use xlink:href="<%= image_url 'solid.svg#chevron-left' %>"></use>
    </svg>
  </button>
  <button class="carousel-control-next" style="width: 40px; height: 40px; background: #e6dcdc; border: none; box-shadow: var(--box-shadow); border-radius: 20px;" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Next</span>
    <svg width="24px" height="24px" style="position: absolute; fill: #000; left: 8px; top: 8px;">
      <use xlink:href="<%= image_url 'solid.svg#chevron-right' %>"></use>
    </svg>
  </button>
</div>

<script>
  function debounce(func, wait, immediate) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  };
  var emitChangeEvent = debounce(function (input) {
    input.dispatchEvent(new Event('change'))
  }, 300)

  document.querySelectorAll('.players').forEach(section => {
    section.querySelectorAll('form').forEach(form => {
    form.addEventListener('submit', e => {
      const formData = new FormData(form)
      fetch(form.action, {
        method: form.method, // or 'PUT'
        body: formData,
      })
      e.preventDefault()
    })
    form.querySelectorAll('select').forEach(select => {
      select.addEventListener('change', e => {
        form.dispatchEvent(new Event('submit'));
      });
    })
    form.querySelector('input[type="number"]').addEventListener('change', e => {
      form.dispatchEvent(new Event('submit'));
    })
    form.querySelectorAll('[data-target]').forEach(button => {
      button.addEventListener('click', e => {
        const input = form.querySelector('[name="score[total_count]"]');
        if (input.value.length > 0) {
          input.value = button.querySelector('use').getAttribute('xlink:href').split('-').splice(-1)[0] === 'plus' ? parseInt(input.value) + 1 : parseInt(input.value) - 1
        } else {
          input.value = input.dataset.par
        }
        emitChangeEvent(input)
        e.preventDefault()
      })
    })
    })
  })
  var myCarousel = document.getElementById('carouselExampleControls')

  myCarousel.addEventListener('slide.bs.carousel', async function (e) {
    const holeCount = parseInt(e.target.dataset.holeCount);
    const holeNumber = parseInt(e.target.dataset.holeNumber);
    let nextHole = e.direction === 'left' ? holeNumber + 1 : holeNumber - 1
    if (nextHole < 1) {
      nextHole = holeCount
    } else if (nextHole > holeCount) {
      nextHole = 1
    }
    e.target.dataset.holeNumber = nextHole;
    e.relatedTarget.querySelector('.hole-number').innerText = nextHole
    const res = await fetch("<%= scores_path format: :json %>" + '?' + new URLSearchParams({
      match_id: "<%= @match.id %>",
      hole_number: nextHole,
    }))
    const scores = await res.json()
    e.relatedTarget.querySelectorAll('form').forEach(form => {
      const score = scores.find(s => s.player_id == form.dataset.playerId)
      form.action = score.url;
      form.querySelector('[name="score[match_id]"]').value = score.match_id
      form.querySelector('[name="score[player_id]"]').value = score.player_id
      form.querySelector('[name="score[hole_id]"]').value = score.hole_id
      form.querySelector('[name="score[putt_count]"]').value = score.putt_count || ''
      form.querySelector('[name="score[lost_ball_count]"]').value = score.lost_ball_count || ''
      form.querySelector('[name="score[total_count]"]').value = score.total_count || ''
    })

    const res1 = await fetch("<%= holes_path format: :json %>" + '?' + new URLSearchParams({
      course_id: "<%= @match.course_id %>",
      number: nextHole,
    }))
    const json1 = await res1.json()
    const hole = json1[0]
    const params = new URLSearchParams(document.location.search);
    params.set('score[hole_id]', hole.id)
    history.replaceState(null, null, "?" + params.toString());
    e.relatedTarget.querySelector('.hole-par').innerText = hole.par
    e.relatedTarget.querySelector('.hole-stroke').innerText = hole.stroke
  })
</script>